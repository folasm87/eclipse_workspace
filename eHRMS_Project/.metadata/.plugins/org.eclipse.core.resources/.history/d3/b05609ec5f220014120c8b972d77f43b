package com.multivision.ehrms.action;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;

import com.multivision.ehrms.action.form.ProjectForm;
import com.multivision.ehrms.business.Employee;
import com.multivision.ehrms.business.Project;
import com.multivision.ehrms.exception.DataSourceConnectivityFailedException;
import com.multivision.ehrms.exception.DuplicateRecordException;
import com.multivision.ehrms.service.business.BusinessServiceFactory;
import com.multivision.ehrms.service.business.interfaces.IEmployeeBusinessService;
import com.multivision.ehrms.service.business.interfaces.IProjectBusinessService;

public class ProjectAction extends BaseDispatchAction {

	private Logger logger = Logger.getRootLogger();
	BusinessServiceFactory bsFactory;

	public BusinessServiceFactory getBsFactory() {
		return bsFactory;
	}

	public void setBsFactory(BusinessServiceFactory bsFactory) {
		this.bsFactory = bsFactory;
	}

	@Override
	public ActionForward perform(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		ActionForward forward = null;
		if (request.getParameter("method") != null) {
			String parameter = request.getParameter("method");
			if (parameter.equalsIgnoreCase("list")) {
				forward = list(mapping, form, request, response);
			} else if (parameter.equalsIgnoreCase("add")) {
				forward = add(mapping, form, request, response);
			} else if (parameter.equalsIgnoreCase("save")) {
				forward = save(mapping, form, request, response);
			} else if (parameter.equalsIgnoreCase("edit")) {
				forward = edit(mapping, form, request, response);
			} else if (parameter.equalsIgnoreCase("view")) {
				forward = view(mapping, form, request, response);
			}
		}
		return forward;
	}

	public ActionForward list(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		logger.info("Listing project information");
		ActionForward forward = null;
		List<Project> projects = getProjects();
		request.setAttribute("PROJECTS", projects);
		forward = mapping.findForward("list");
		return forward;
	}

	public ActionForward add(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		logger.info("Displaying add screen to add project details");
		ActionForward forward = null;
		ProjectForm projForm = (ProjectForm) form;
		projForm.setAction("add");
		clearFormValues(projForm);
		request.getSession(false).setAttribute("EMPLOYEES", fetchEmployees());
		forward = mapping.findForward("add");
		return forward;
	}

	public ActionForward edit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		logger.info("Displaying edit screen to edit project details");
		ActionForward forward = null;
		ProjectForm projForm = (ProjectForm) form;
		Long Id = null;
		if (request.getParameter("id") != null
				&& request.getParameter("id").length() > 0) {
			Id = Long.valueOf(request.getParameter("id"));
		}
		Project project = fetchProject(Id);
		request.getSession(false).setAttribute("EMPLOYEES", fetchEmployees());
		projForm.setAction("edit");
		setFormValues(projForm, project);
		forward = mapping.findForward("edit");
		return forward;
	}

	public ActionForward view(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		logger.info("Displaying view screen to display project details");
		ActionForward forward = null;
		ProjectForm projForm = (ProjectForm) form;
		Long Id = null;
		if (request.getParameter("id") != null
				&& request.getParameter("id").length() > 0) {
			Id = Long.valueOf(request.getParameter("id"));
		}
		Project project = fetchProject(Id);
		setFormValues(projForm, project);
		forward = mapping.findForward("view");
		return forward;
	}

	public ActionForward save(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		logger.info("Trying to save the project details");
		ActionForward forward = null;
		ActionMessages messages = new ActionMessages();
		forward = mapping.findForward("save");
		ProjectForm projForm = (ProjectForm) form;
		try {
			saveValues(projForm);
			messages.add("project_add_status", new ActionMessage(
					"project.data.added.success"));
			saveMessages(request, messages);
			projForm.setAction("save");
			logger.info("Saved the employee details");
		} catch (DataSourceConnectivityFailedException dscfException) {
			logger.debug(dscfException);
			messages.add("project_add_status", new ActionMessage(
					"global.db.connectivity.failure"));
			saveMessages(request, messages);
		} catch (DuplicateRecordException drException) {
			logger.debug(drException);
			messages.add("project_add_status", new ActionMessage(
					"project.data.added.duplicate.failed"));
			saveMessages(request, messages);
		} catch (Exception exception) {
			logger.debug(exception);
			messages.add("project_add_status",
					new ActionMessage("project.data.added.general.failure",
							exception.getMessage()));
			saveMessages(request, messages);
		}
		return forward;
	}

	private List<Project> getProjects() throws Exception {
		List<Project> projects = new ArrayList<Project>();
		IProjectBusinessService employeeService = (IProjectBusinessService) getBsFactory()
				.getFactory().getBean("projectBS");
		projects = employeeService.getProjects();
		return projects;
	}

	private void clearFormValues(ProjectForm projectForm) {
		projectForm.setName("");
		projectForm.setContractRefNo("");
		projectForm.setCustomer("");
		projectForm.setEstimatedCost(0.0);
		projectForm.setEstimatedHours("");
		projectForm.getProjectCoordinator().setId(0L);
		projectForm.getProjectManager().setId(0L);
		projectForm.setProjectId(null);
		projectForm.setRemarks("");
		projectForm.setTechnologies("");
		projectForm.setBusinessObjective("");
		projectForm.setBusinessObjective("");
		projectForm.setCategory("");
		projectForm.setStartDate("");
		projectForm.setEndDate("");
	}

	private void setFormValues(ProjectForm projectForm, Project project) {
		projectForm.setId(project.getId());
		projectForm.setName(project.getName());
		projectForm.setProjectId(project.getProjectId());
		projectForm.setContractRefNo(project.getContractRefNo());
		projectForm.setCustomer(project.getCustomer());
		projectForm.setEstimatedCost(project.getEstimatedCost());
		projectForm.setEstimatedHours(project.getEstimatedHours());
		projectForm.getProjectCoordinator().setId(
				project.getProjectCoordinator().getId());
		projectForm.getProjectManager().setId(
				project.getProjectManager().getId());
		projectForm.getProjectCoordinator().setName(
				project.getProjectCoordinator().getName());
		projectForm.getProjectManager().setName(
				project.getProjectManager().getName());
		projectForm.setRemarks(project.getRemarks());
		projectForm.setTechnologies(project.getTechnologies());
		projectForm.setCost(project.getCost());
		projectForm.setObjective(project.getObjective());
		projectForm.setCategory(project.getCategory());
		projectForm.setStartDate(project.getStartDate());
		projectForm.setEndDate(project.getEndDate());
	}

	private void saveValues(ProjectForm projectForm) throws Exception {
		Project project = saveFormValues(projectForm);
		IProjectBusinessService projectService = (IProjectBusinessService) getBsFactory()
				.getFactory().getBean("projectBS");
		projectService.saveProject(project);
	}

	private Project saveFormValues(ProjectForm projectForm) throws Exception {
		Project project = new Project();
		if (!projectForm.getAction().equalsIgnoreCase("add")) {
			project.setId(projectForm.getId());
		}
		project.setProjectId(projectForm.getProjectId());
		project.setContractRefNo(projectForm.getContractRefNo());
		project.setCustomer(projectForm.getCustomer());
		project.setEstimatedCost(projectForm.getEstimatedCost());
		project.setEstimatedHours(projectForm.getEstimatedHours());
		project.setName(projectForm.getName());
		project.getProjectCoordinator().setId(
				projectForm.getProjectCoordinator().getId());
		project.getProjectManager().setId(
				projectForm.getProjectManager().getId());
		project.setRemarks(projectForm.getRemarks());
		project.setTechnologies(projectForm.getTechnologies());
		project.setStartDate(projectForm.getStartDate());
		project.setEndDate(projectForm.getEndDate());
		project.setCost(projectForm.getCost());
		project.setObjective(projectForm.getObjective());
		project.setCategory(projectForm.getCategory());
		return project;
	}

	private List<Employee> fetchEmployees() throws Exception {
		List<Employee> employees = new ArrayList<Employee>();
		IEmployeeBusinessService employeeService = (IEmployeeBusinessService) getBsFactory()
				.getFactory().getBean("employeeBS");
		employees = employeeService.getEmployees();
		return employees;
	}

	private Project fetchProject(Long Id) throws Exception {
		Project project = null;
		IProjectBusinessService projectService = (IProjectBusinessService) getBsFactory()
				.getFactory().getBean("projectBS");
		project = projectService.getProject(Id);
		return project;
	}
}
