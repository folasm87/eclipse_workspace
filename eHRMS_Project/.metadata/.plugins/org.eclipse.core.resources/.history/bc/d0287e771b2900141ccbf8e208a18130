package com.multivision.ehrms.action;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;

import com.multivision.ehrms.action.form.IssueForm;
import com.multivision.ehrms.business.Employee;
import com.multivision.ehrms.business.Issue;
import com.multivision.ehrms.business.Project;
import com.multivision.ehrms.exception.DataSourceConnectivityFailedException;
import com.multivision.ehrms.exception.DuplicateRecordException;
import com.multivision.ehrms.service.business.BusinessServiceFactory;
import com.multivision.ehrms.service.business.interfaces.IEmployeeBusinessService;
import com.multivision.ehrms.service.business.interfaces.IIssueBusinessService;
import com.multivision.ehrms.service.business.interfaces.IProjectBusinessService;

public class IssueAction extends BaseDispatchAction {
	
	//private Logger //logger = Logger.getRootLogger();
	BusinessServiceFactory bsFactory;

	public BusinessServiceFactory getBsFactory() {
		return bsFactory;
	}

	public void setBsFactory(BusinessServiceFactory bsFactory) {
		this.bsFactory = bsFactory;
	}

	@Override
	protected ActionForward perform(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		ActionForward forward = null;
		if (request.getParameter("method") != null) {
			String parameter = request.getParameter("method");
			if (parameter.equalsIgnoreCase("list")) {
				forward = list(mapping, form, request, response);
				////logger.info("Forwarding List");
			} else if (parameter.equalsIgnoreCase("add")) {
				forward = add(mapping, form, request, response);
				//logger.info("Forwarding Add");
			} else if (parameter.equalsIgnoreCase("save")) {
				forward = save(mapping, form, request, response);
				//logger.info("Forwarding Save");
			} else if (parameter.equalsIgnoreCase("edit")) {
				forward = edit(mapping, form, request, response);
				//logger.info("Forwarding Edit");
			} else if (parameter.equalsIgnoreCase("view")) {
				forward = view(mapping, form, request, response);
				//logger.info("Forwarding View");
			}
		}
		//logger.info("Forwarding...");
		return forward;
	}
	
	public ActionForward list(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		//logger.info("Listing issue information");
		ActionForward forward = null;
		//logger.info("Instantiated Action Forward");
		List<Issue> issues = getIssues();
		//logger.info("Got ISSUES");
		request.setAttribute("ISSUES", issues);
		//logger.info("Set ISSUES");
		forward = mapping.findForward("list");
		//logger.info("Finished list function");
		
		return forward;
	}

	public ActionForward add(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		//logger.info("Displaying add screen to add issue details");
		ActionForward forward = null;
		//logger.info("1");
		IssueForm issueForm = (IssueForm) form;
		//logger.info("2");
		issueForm.setAction("add");
		//logger.info("3");
		clearFormValues(issueForm);
		//logger.info("4");
		request.getSession(false).setAttribute("PROJECTS", fetchProjects());
		//request.getSession(false).setAttribute("EMPLOYEES", fetchEmployees());
		//logger.info("5");
		forward = mapping.findForward("add");
		//logger.info("6");
		return forward;
	}

	public ActionForward edit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		//logger.info("Displaying edit screen to edit issue details");
		ActionForward forward = null;
		//logger.info("display1");
		IssueForm issueForm = (IssueForm) form;
		//logger.info("display2");
		Long Id = null;
		//logger.info("display3");
		if (request.getParameter("id") != null
				&& request.getParameter("id").length() > 0) {
			//logger.info("display4");
			Id = Long.valueOf(request.getParameter("id"));
			//logger.info("display5");
		}
		Issue issue = fetchIssue(Id);
		//logger.info("display6");
		request.getSession(false).setAttribute("PROJECTS", fetchProjects());
		//logger.info("display7");
		//request.getSession(false).setAttribute("EMPLOYEES", fetchEmployees());
		//logger.info("display8");
		issueForm.setAction("edit");
		//logger.info("display9");
		setFormValues(issueForm, issue);
		//logger.info("display10");
		forward = mapping.findForward("edit");
		//logger.info("display11");
		return forward;
	}

	public ActionForward view(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		//logger.info("Displaying view screen to display issue details");
		ActionForward forward = null;
		//logger.info("view1");
		IssueForm issueForm = (IssueForm) form;
		//logger.info("view2");
		Long Id = null;
		//logger.info("view3");
		if (request.getParameter("id") != null
				&& request.getParameter("id").length() > 0) {
			//logger.info("view4");
			Id = Long.valueOf(request.getParameter("id"));
			//logger.info("view5");
		}
		//logger.info("view6");
		Issue issue = fetchIssue(Id);
		//logger.info("view7");
		setFormValues(issueForm, issue);
		//logger.info("view8");
		forward = mapping.findForward("view");
		//logger.info("view9");
		return forward;
	}

	public ActionForward save(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		//logger.info("Trying to save the issue details");
		ActionForward forward = null;
		ActionMessages messages = new ActionMessages();
		forward = mapping.findForward("save");
		IssueForm issueForm = (IssueForm) form;
		try {
			saveValues(issueForm);
			messages.add("issue_add_status", new ActionMessage(
					"issue.data.added.success"));
			saveMessages(request, messages);
			issueForm.setAction("save");
			//logger.info("Saved the project details");
		} catch (DataSourceConnectivityFailedException dscfException) {
			//logger.debug(dscfException);
			messages.add("issue_add_status", new ActionMessage(
					"global.db.connectivity.failure"));
			saveMessages(request, messages);
		} catch (DuplicateRecordException drException) {
			//logger.debug(drException);
			messages.add("issue_add_status", new ActionMessage(
					"issue.data.added.duplicate.failed"));
			saveMessages(request, messages);
		} catch (Exception exception) {
			//logger.debug(exception);
			messages.add("issue_add_status",
					new ActionMessage("issue.data.added.general.failure",
							exception.getMessage()));
			saveMessages(request, messages);
		}
		return forward;
	}

	private List<Issue> getIssues() throws Exception {
		//logger.info("Starting getIssues()");
		List<Issue> issues = new ArrayList<Issue>();
		//logger.info("IIssueBusinessService");
		IIssueBusinessService projectService = (IIssueBusinessService) getBsFactory()
				.getFactory().getBean("issueBS");
		//logger.info("getBSFactory IIssueBusinessService");
		issues = projectService.getIssues();
		//logger.info("Got issues from IIssueBusinessService");
		return issues;
	}

	private void clearFormValues(IssueForm issueForm) {
		//logger.info("a");
		issueForm.setName("");
		//logger.info("b");
		issueForm.setEstimatedHours("");
		//logger.info("c");
		issueForm.setIssueId(null);
		//logger.info("d");
		issueForm.setProject(new Project());
		//issueForm.getProject().setId(1L);
		//logger.info("e");
		issueForm.setIssueHandler(new Employee());
		//issueForm.getIssueHandler().setId(0L);
		//logger.info("f");
		
	}

	private void setFormValues(IssueForm issueForm, Issue issue) {
		issueForm.setId(issue.getId());
		issueForm.setName(issue.getName());
		issueForm.setIssueId(issue.getIssueId());
		issueForm.setEstimatedHours(issue.getEstimatedHours());
		
		issueForm.setProject(issue.getProject());
		issueForm.getProject().setId(
				issue.getProject().getId());
		issueForm.getProject().setName(
				issue.getProject().getName());
		
		issueForm.setIssueHandler(issue.getIssueHandler());
		issueForm.getIssueHandler().setId(issue.getIssueHandler().getId());
		issueForm.getIssueHandler().setName(issue.getIssueHandler().getName());
	}

	private void saveValues(IssueForm issueForm) throws Exception {
		Issue issue = saveFormValues(issueForm);
		//logger.info("11");
		IIssueBusinessService issueService = (IIssueBusinessService) getBsFactory()
				.getFactory().getBean("issueBS");
		//logger.info("12");
		issueService.saveIssue(issue);
	}

	private Issue saveFormValues(IssueForm issueForm) throws Exception {
		Issue issue = new Issue();
		//logger.info("13");
		if (!issueForm.getAction().equalsIgnoreCase("add")) {
			issue.setId(issueForm.getId());
		}
		//logger.info("14");
		issue.setIssueId(issueForm.getIssueId());
		//logger.info("15");
		issue.setIssue(issueForm.getIssue());
		//logger.info("16");
		//issue.setEstimatedHours(issueForm.getEstimatedHours());
		//logger.info("17");
		issue.setProject(issueForm.getProject());
		/*issue.getProject().setId(
				issueForm.getProject().getId());*/
		//logger.info("18");
		issue.getProject().setId(
				issueForm.getProject().getId());
		//logger.info("19a");
		issue.getProject().setName(
				issueForm.getProject().getName());
		//logger.info("19b");
		//issue.setIssueHandler(issueForm.getIssueHandler());
		//logger.info("19c");
		//issue.getIssueHandler().setId(issueForm.getIssueHandler().getId());
		//logger.info("20");
		//issue.getIssueHandler().setName(issueForm.getIssueHandler().getName());
		//logger.info("21");
		return issue;
	}

	private List<Project> fetchProjects() throws Exception {
		List<Project> projects = new ArrayList<Project>();
		IProjectBusinessService projectService = (IProjectBusinessService) getBsFactory()
				.getFactory().getBean("projectBS");
		projects = projectService.getProjects();
		return projects;
	}
	
	private List<Employee> fetchEmployees() throws Exception {
		List<Employee> employees = new ArrayList<Employee>();
		IEmployeeBusinessService employeeService = (IEmployeeBusinessService) getBsFactory()
				.getFactory().getBean("employeeBS");
		employees = employeeService.getEmployees();
		return employees;
	}

	private Issue fetchIssue(Long Id) throws Exception {
		Issue issue = null;
		IIssueBusinessService issueService = (IIssueBusinessService) getBsFactory()
				.getFactory().getBean("issueBS");
		issue = issueService.getIssue(Id);
		return issue;
	}

}
