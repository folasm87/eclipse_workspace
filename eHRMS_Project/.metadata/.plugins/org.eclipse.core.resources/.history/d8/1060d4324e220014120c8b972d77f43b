package com.multivision.ehrms.action;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;



import com.multivision.ehrms.action.form.ResourceForm;
import com.multivision.ehrms.business.Resource;
import com.multivision.ehrms.business.Project;
import com.multivision.ehrms.exception.DataSourceConnectivityFailedException;
import com.multivision.ehrms.exception.DuplicateRecordException;
import com.multivision.ehrms.service.business.BusinessServiceFactory;
import com.multivision.ehrms.service.business.interfaces.IResourceBusinessService;
import com.multivision.ehrms.service.business.interfaces.IProjectBusinessService;

public class ResourceAction extends BaseDispatchAction {
	
	private Logger logger = Logger.getRootLogger();
	BusinessServiceFactory bsFactory;

	public BusinessServiceFactory getBsFactory() {
		return bsFactory;
	}

	public void setBsFactory(BusinessServiceFactory bsFactory) {
		this.bsFactory = bsFactory;
	}

	@Override
	protected ActionForward perform(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		ActionForward forward = null;
		if (request.getParameter("method") != null) {
			String parameter = request.getParameter("method");
			if (parameter.equalsIgnoreCase("list")) {
				forward = list(mapping, form, request, response);
			} else if (parameter.equalsIgnoreCase("add")) {
				forward = add(mapping, form, request, response);
			} else if (parameter.equalsIgnoreCase("save")) {
				forward = save(mapping, form, request, response);
			} else if (parameter.equalsIgnoreCase("edit")) {
				forward = edit(mapping, form, request, response);
			} else if (parameter.equalsIgnoreCase("view")) {
				forward = view(mapping, form, request, response);
			}
		}
		return forward;
	}
	
	public ActionForward list(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		logger.info("Listing project information");
		ActionForward forward = null;
		List<Project> projects = getProjects();
		request.setAttribute("PROJECTS", projects);
		forward = mapping.findForward("list");
		return forward;
	}

	public ActionForward add(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		logger.info("Displaying add screen to add project details");
		ActionForward forward = null;
		ResourceForm resourceForm = (ResourceForm) form;
		resourceForm.setAction("add");
		clearFormValues(resourceForm);
		request.getSession(false).setAttribute("PROJECTS", fetchProjects());
		forward = mapping.findForward("add");
		return forward;
	}

	public ActionForward edit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		logger.info("Displaying edit screen to edit employee details");
		ActionForward forward = null;
		ResourceForm resourceForm = (ResourceForm) form;
		Long Id = null;
		if (request.getParameter("id") != null
				&& request.getParameter("id").length() > 0) {
			Id = Long.valueOf(request.getParameter("id"));
		}
		Resource resource = fetchResource(Id);
		request.getSession(false).setAttribute("PROJECTS", fetchProjects());
		resourceForm.setAction("edit");
		setFormValues(resourceForm, resource);
		forward = mapping.findForward("edit");
		return forward;
	}

	public ActionForward view(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		logger.info("Displaying view screen to display project details");
		ActionForward forward = null;
		ResourceForm resourceForm = (ResourceForm) form;
		Long Id = null;
		if (request.getParameter("id") != null
				&& request.getParameter("id").length() > 0) {
			Id = Long.valueOf(request.getParameter("id"));
		}
		Resource resource = fetchResource(Id);
		setFormValues(resourceForm, resource);
		forward = mapping.findForward("view");
		return forward;
	}

	public ActionForward save(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		logger.info("Trying to save the project details");
		ActionForward forward = null;
		ActionMessages messages = new ActionMessages();
		forward = mapping.findForward("save");
		ResourceForm resourceForm = (ResourceForm) form;
		try {
			saveValues(resourceForm);
			messages.add("project_add_status", new ActionMessage(
					"project.data.added.success"));
			saveMessages(request, messages);
			resourceForm.setAction("save");
			logger.info("Saved the employee details");
		} catch (DataSourceConnectivityFailedException dscfException) {
			logger.debug(dscfException);
			messages.add("project_add_status", new ActionMessage(
					"global.db.connectivity.failure"));
			saveMessages(request, messages);
		} catch (DuplicateRecordException drException) {
			logger.debug(drException);
			messages.add("project_add_status", new ActionMessage(
					"project.data.added.duplicate.failed"));
			saveMessages(request, messages);
		} catch (Exception exception) {
			logger.debug(exception);
			messages.add("project_add_status",
					new ActionMessage("project.data.added.general.failure",
							exception.getMessage()));
			saveMessages(request, messages);
		}
		return forward;
	}

	private List<Project> getProjects() throws Exception {
		List<Project> projects = new ArrayList<Project>();
		IProjectBusinessService employeeService = (IProjectBusinessService) getBsFactory()
				.getFactory().getBean("projectBS");
		projects = employeeService.getProjects();
		return projects;
	}

	private void clearFormValues(ResourceForm ResourceForm) {
		ResourceForm.setName("");
		ResourceForm.setContractRefNo("");
		ResourceForm.setCustomer("");
		ResourceForm.setEstimatedCost(0.0);
		ResourceForm.setEstimatedHours("");
		ResourceForm.getProjectCoordinator().setId(0L);
		ResourceForm.getProjectManager().setId(0L);
		ResourceForm.setProjectId(null);
		ResourceForm.setRemarks("");
		ResourceForm.setTechnologies("");
	}

	private void setFormValues(ResourceForm ResourceForm, Resource resource) {
		ResourceForm.setId(project.getId());
		ResourceForm.setName(project.getName());
		ResourceForm.setProjectId(project.getProjectId());
		ResourceForm.setContractRefNo(project.getContractRefNo());
		ResourceForm.setCustomer(project.getCustomer());
		ResourceForm.setEstimatedCost(project.getEstimatedCost());
		ResourceForm.setEstimatedHours(project.getEstimatedHours());
		ResourceForm.getProjectCoordinator().setId(
				project.getProjectCoordinator().getId());
		ResourceForm.getProjectManager().setId(
				project.getProjectManager().getId());
		ResourceForm.getProjectCoordinator().setName(
				project.getProjectCoordinator().getName());
		ResourceForm.getProjectManager().setName(
				project.getProjectManager().getName());
		ResourceForm.setRemarks(project.getRemarks());
		ResourceForm.setTechnologies(project.getTechnologies());
		ResourceForm.setStartDate(project.getStartDate());
		ResourceForm.setEndDate(project.getEndDate());
	}

	private void saveValues(ResourceForm resourceForm) throws Exception {
		Resource resource = saveFormValues(ResourceForm);
		IProjectBusinessService projectService = (IProjectBusinessService) getBsFactory()
				.getFactory().getBean("projectBS");
		projectService.saveProject(project);
	}

	private Project saveFormValues(ResourceForm ResourceForm) throws Exception {
		Resource resource = new Resource();
		if (!ResourceForm.getAction().equalsIgnoreCase("add")) {
			project.setId(ResourceForm.getId());
		}
		project.setProjectId(ResourceForm.getProjectId());
		project.setContractRefNo(ResourceForm.getContractRefNo());
		project.setCustomer(ResourceForm.getCustomer());
		project.setEstimatedCost(ResourceForm.getEstimatedCost());
		project.setEstimatedHours(ResourceForm.getEstimatedHours());
		project.setName(ResourceForm.getName());
		project.getProjectCoordinator().setId(
				ResourceForm.getProjectCoordinator().getId());
		project.getProjectManager().setId(
				ResourceForm.getProjectManager().getId());
		project.setRemarks(ResourceForm.getRemarks());
		project.setTechnologies(ResourceForm.getTechnologies());
		project.setStartDate(ResourceForm.getStartDate());
		project.setEndDate(ResourceForm.getEndDate());
		return project;
	}

	private List<Project> fetchProjects() throws Exception {
		List<Project> projects = new ArrayList<Project>();
		IProjectBusinessService projectService = (IProjectBusinessService) getBsFactory()
				.getFactory().getBean("projectBS");
		projects = projectService.getProjects();
		return projects;
	}

	private Resource fetchResource(Long Id) throws Exception {
		Resource resource = null;
		IResourceBusinessService resourceService = (IResourceBusinessService) getBsFactory()
				.getFactory().getBean("resourceBS");
		resource = resourceService.getResource(Id);
		return resource;
	}

}
