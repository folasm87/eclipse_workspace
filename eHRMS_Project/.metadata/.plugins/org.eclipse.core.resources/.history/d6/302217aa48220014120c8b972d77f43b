package com.multivision.ehrms.action;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;

import com.multivision.ehrms.action.form.taskForm;
import com.multivision.ehrms.action.form.TaskForm;
import com.multivision.ehrms.business.Employee;
import com.multivision.ehrms.business.Task;
import com.multivision.ehrms.business.Project;
import com.multivision.ehrms.exception.DataSourceConnectivityFailedException;
import com.multivision.ehrms.exception.DuplicateRecordException;
import com.multivision.ehrms.service.business.BusinessServiceFactory;
import com.multivision.ehrms.service.business.interfaces.IEmployeeBusinessService;
import com.multivision.ehrms.service.business.interfaces.ITaskBusinessService;
import com.multivision.ehrms.service.business.interfaces.IProjectBusinessService;

public class TaskAction extends BaseDispatchAction {
	
	private Logger logger = Logger.getRootLogger();
	BusinessServiceFactory bsFactory;

	public BusinessServiceFactory getBsFactory() {
		return bsFactory;
	}

	public void setBsFactory(BusinessServiceFactory bsFactory) {
		this.bsFactory = bsFactory;
	}

	@Override
	protected ActionForward perform(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		ActionForward forward = null;
		if (request.getParameter("method") != null) {
			String parameter = request.getParameter("method");
			if (parameter.equalsIgnoreCase("list")) {
				forward = list(mapping, form, request, response);
			} else if (parameter.equalsIgnoreCase("add")) {
				forward = add(mapping, form, request, response);
			} else if (parameter.equalsIgnoreCase("save")) {
				forward = save(mapping, form, request, response);
			} else if (parameter.equalsIgnoreCase("edit")) {
				forward = edit(mapping, form, request, response);
			} else if (parameter.equalsIgnoreCase("view")) {
				forward = view(mapping, form, request, response);
			}
		}
		return forward;
	}
	
	public ActionForward list(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		logger.info("Listing project information");
		ActionForward forward = null;
		List<Task> tasks = getTasks();
		request.setAttribute("TASKS", tasks);
		forward = mapping.findForward("list");
		return forward;
	}

	public ActionForward add(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		logger.info("Displaying add screen to add project details");
		ActionForward forward = null;
		TaskForm taskForm = (TaskForm) form;
		taskForm.setAction("add");
		clearFormValues(taskForm);
		request.getSession(false).setAttribute("EMPLOYEES", fetchEmployees());
		forward = mapping.findForward("add");
		return forward;
	}

	public ActionForward edit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		logger.info("Displaying edit screen to edit employee details");
		ActionForward forward = null;
		taskForm projForm = (taskForm) form;
		Long Id = null;
		if (request.getParameter("id") != null
				&& request.getParameter("id").length() > 0) {
			Id = Long.valueOf(request.getParameter("id"));
		}
		Project project = fetchProject(Id);
		request.getSession(false).setAttribute("EMPLOYEES", fetchEmployees());
		projForm.setAction("edit");
		setFormValues(projForm, project);
		forward = mapping.findForward("edit");
		return forward;
	}

	public ActionForward view(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		logger.info("Displaying view screen to display project details");
		ActionForward forward = null;
		taskForm projForm = (taskForm) form;
		Long Id = null;
		if (request.getParameter("id") != null
				&& request.getParameter("id").length() > 0) {
			Id = Long.valueOf(request.getParameter("id"));
		}
		Project project = fetchProject(Id);
		setFormValues(projForm, project);
		forward = mapping.findForward("view");
		return forward;
	}

	public ActionForward save(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		logger.info("Trying to save the project details");
		ActionForward forward = null;
		ActionMessages messages = new ActionMessages();
		forward = mapping.findForward("save");
		taskForm projForm = (taskForm) form;
		try {
			saveValues(projForm);
			messages.add("project_add_status", new ActionMessage(
					"project.data.added.success"));
			saveMessages(request, messages);
			projForm.setAction("save");
			logger.info("Saved the employee details");
		} catch (DataSourceConnectivityFailedException dscfException) {
			logger.debug(dscfException);
			messages.add("project_add_status", new ActionMessage(
					"global.db.connectivity.failure"));
			saveMessages(request, messages);
		} catch (DuplicateRecordException drException) {
			logger.debug(drException);
			messages.add("project_add_status", new ActionMessage(
					"project.data.added.duplicate.failed"));
			saveMessages(request, messages);
		} catch (Exception exception) {
			logger.debug(exception);
			messages.add("project_add_status",
					new ActionMessage("project.data.added.general.failure",
							exception.getMessage()));
			saveMessages(request, messages);
		}
		return forward;
	}

	private List<Task> getTasks() throws Exception {
		List<Task> tasks = new ArrayList<Task>();
		ITaskBusinessService projectService = (ITaskBusinessService) getBsFactory()
				.getFactory().getBean("taskBS");
		tasks = projectService.getTasks();
		return tasks;
	}

	private void clearFormValues(TaskForm taskForm) {
		taskForm.setName("");
		taskForm.setDuration("");
		taskForm.setTaskId(null);
		taskForm.getProject().setId(0L);
		
	}

	private void setFormValues(TaskForm taskForm, Task task) {
		taskForm.setId(task.getId());
		taskForm.setName(task.getName());
		taskForm.setTaskId(task.getTaskId());
		taskForm.setDuration(task.getDuration());
		taskForm.getProject().setId(
				task.getProject().getId());
		taskForm.getProject().setName(
				task.getProject().getName());
		taskForm.setRemarks(project.getRemarks());
		taskForm.setTechnologies(project.getTechnologies());
		taskForm.setStartDate(project.getStartDate());
		taskForm.setEndDate(project.getEndDate());
	}

	private void saveValues(taskForm taskForm) throws Exception {
		Project project = saveFormValues(taskForm);
		IProjectBusinessService projectService = (IProjectBusinessService) getBsFactory()
				.getFactory().getBean("projectBS");
		projectService.saveProject(project);
	}

	private Project saveFormValues(taskForm taskForm) throws Exception {
		Project project = new Project();
		if (!taskForm.getAction().equalsIgnoreCase("add")) {
			project.setId(taskForm.getId());
		}
		project.setProjectId(taskForm.getProjectId());
		project.setContractRefNo(taskForm.getContractRefNo());
		project.setCustomer(taskForm.getCustomer());
		project.setEstimatedCost(taskForm.getEstimatedCost());
		project.setEstimatedHours(taskForm.getEstimatedHours());
		project.setName(taskForm.getName());
		project.getProjectCoordinator().setId(
				taskForm.getProjectCoordinator().getId());
		project.getProjectManager().setId(
				taskForm.getProjectManager().getId());
		project.setRemarks(taskForm.getRemarks());
		project.setTechnologies(taskForm.getTechnologies());
		project.setStartDate(taskForm.getStartDate());
		project.setEndDate(taskForm.getEndDate());
		return project;
	}

	private List<Employee> fetchEmployees() throws Exception {
		List<Employee> employees = new ArrayList<Employee>();
		IEmployeeBusinessService employeeService = (IEmployeeBusinessService) getBsFactory()
				.getFactory().getBean("employeeBS");
		employees = employeeService.getEmployees();
		return employees;
	}

	private Project fetchProject(Long Id) throws Exception {
		Project project = null;
		IProjectBusinessService projectService = (IProjectBusinessService) getBsFactory()
				.getFactory().getBean("projectBS");
		project = projectService.getProject(Id);
		return project;
	}

}
