package net.mv.dao;

import java.util.List;

import javax.persistence.Column;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;

import com.bea.common.security.xacml.Type;

public class DAO {
	
	/*public static boolean insertUser(String username, String password,
			String fname, String lname, String role, String email, String phone) {

		Session session = null;

		try {
			session = HibernateUtility.getSessionFactory().openSession();
			System.out.println(username + ": " + fname + " " + lname);
			Transaction tx = session.beginTransaction();
			User user = new User();

			user.setUsername(username);
			user.setPassword(password);
			user.setFname(fname);
			user.setLname(lname);
			user.setRole(role);
			user.setEmail(email);
			user.setPhone(phone);
			
			System.out.println(user);

			session.saveOrUpdate(user);
			//session.flush();
			tx.commit();
			//session.close();

			return true;

		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}
	
	public static User retrieveUser(String username, String password) {

		Session session = null;
		User found = null;

		try {
			session = HibernateUtility.getSessionFactory().openSession();
			System.out.println(username + ": " + password);
			//Transaction tx = session.beginTransaction();
			
			Query query = session.createQuery("from User where USERNAME = :username AND PASSWORD = :password ");
			
			query.setParameter("username", username);
			query.setParameter("password", password);
			//session.saveOrUpdate(user);
			List<?> list = query.list();
			
			found = (User)list.get(0);
			System.out.println("You retrieved the following user:");
			System.out.println(found);
			
			
			session.flush();
			//tx.commit();
			session.close();

			

		} catch (Exception e) {
			e.printStackTrace();
			
		}
		
		return found;
	}*/
	
	public static boolean insert(String ins_type, List<?> attributes) {

		Session session = null;

		try {
			session = HibernateUtility.getSessionFactory().openSession();
			//System.out.println(username + ": " + fname + " " + lname);
			Transaction tx = session.beginTransaction();
			
			Object obj = null;
			
			switch(ins_type){
			
				case ("project"):
					obj = new Project();
					/*
					 * @Column(name="PROJ_ID")
	private String proj_id;
	
	
	@Column
	private String name;
	private String commissioner;
	private String desc;
	private String category;
	private String objective;
	private String issues;
	private double cost;
	private String startDate;
	private String endDate;
	private String duration;
					 * */
				
				case ("task"):
					obj = new Task();
					
				case ("resource"):
					obj = new Resource();
					
				case ("contract"):
					obj = new Contract();
					
				default:
					obj = new User();
					
					obj.setUsername(username);
					obj.setPassword(password);
					obj.setFname(fname);
					obj.setLname(lname);
					obj.setRole(role);
					obj.setEmail(email);
					obj.setPhone(phone);
					
	
			
			}
			
			//User user = new User();

			
			
			System.out.println(obj);

			session.saveOrUpdate(obj);
			//session.flush();
			tx.commit();
			//session.close();

			return true;

		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}
	
	public static User retrieve(String retrieve, List<?> attributes) {

		Session session = null;
		User found = null;

		try {
			session = HibernateUtility.getSessionFactory().openSession();
			System.out.println(username + ": " + password);
			//Transaction tx = session.beginTransaction();
			
			Query query = session.createQuery("from User where USERNAME = :username AND PASSWORD = :password ");
			
			query.setParameter("username", username);
			query.setParameter("password", password);
			//session.saveOrUpdate(user);
			List<?> list = query.list();
			
			found = (User)list.get(0);
			System.out.println("You retrieved the following user:");
			System.out.println(found);
			
			
			session.flush();
			//tx.commit();
			session.close();

			

		} catch (Exception e) {
			e.printStackTrace();
			
		}
		
		return found;
	}
	
	

}
